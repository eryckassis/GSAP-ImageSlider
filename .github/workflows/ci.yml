# CI/CD Pipeline - GSAP Image Slider
# 🎯 Analogia: A "Linha de Montagem Automatizada"
# Executa: Lint → Test → Build → Deploy

name: CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]

# Cancela workflows anteriores da mesma branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Job 1: Lint & Format Check
  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📚 Install dependencies
        run: npm ci
      
      - name: 🔍 Run ESLint
        run: npm run lint
      
      - name: 💅 Check formatting
        run: npm run format:check

  # 🧪 Job 2: Unit Tests
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📚 Install dependencies
        run: npm ci
      
      - name: 🧪 Run Jest
        run: npm run test:ci
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: false

  # 🎭 Job 3: E2E Tests
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📚 Install dependencies
        run: npm ci
      
      - name: 🎭 Install Playwright Browsers
        run: npx playwright install chromium --with-deps
      
      - name: 🎬 Run Playwright tests
        run: npm run test:e2e
      
      - name: 📸 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # 🏗️ Job 4: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📚 Install dependencies
        run: npm ci
      
      - name: 🔨 Build application
        run: npm run build
      
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # 🚀 Job 5: Deploy (apenas na main/master)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://gsap-imageslider.vercel.app
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

# 📝 SECRETS NECESSÁRIOS (GitHub Settings → Secrets):
# - CODECOV_TOKEN: Token do Codecov.io
# - VERCEL_TOKEN: Token da Vercel
# - VERCEL_ORG_ID: ID da organização Vercel
# - VERCEL_PROJECT_ID: ID do projeto Vercel

# 🎯 FLUXO COMPLETO:
# 1. Push/PR → Lint & Format
# 2. Testes Unitários (Jest)
# 3. Testes E2E (Playwright)
# 4. Build da aplicação
# 5. Deploy (só na main/master)
