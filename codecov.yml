# Codecov Configuration
# 游꿢 Analogia: O "Auditor de Qualidade" - mede quanto do c칩digo est치 testado
# https://docs.codecov.com/docs/codecov-yaml

coverage:
  status:
    # Status do projeto inteiro
    project:
      default:
        target: 70%           # Meta m칤nima de cobertura
        threshold: 2%         # Toler칙ncia de queda
        if_ci_failed: error   # Falha se CI falhar
    
    # Status do patch (c칩digo novo)
    patch:
      default:
        target: 80%           # C칩digo novo deve ter 80%+ coverage
        threshold: 5%         # Toler칙ncia
        if_ci_failed: error

# Coment치rio autom치tico em PRs
comment:
  layout: "header, diff, flags, components, footer"
  behavior: default
  require_changes: false      # Comenta mesmo sem mudan칞as
  require_base: false
  require_head: true

# Arquivos ignorados
ignore:
  - "**/*.test.js"
  - "**/*.spec.js"
  - "**/__tests__/**"
  - "**/node_modules/**"
  - "dist/**"
  - "coverage/**"
  - "*.config.js"
  - "jest.setup.js"
  - "__mocks__/**"
  - "e2e/**"
  - "src/setup-structure.js"

# Componentes (divide coverage por m칩dulo)
component_management:
  default_rules:
    statuses:
      - type: project
        target: 70%
  
  individual_components:
    # Core modules (mais cr칤ticos)
    - component_id: core
      name: Core Modules
      paths:
        - src/core/**
      rules:
        statuses:
          - type: project
            target: 80%
    
    # Utils (menos cr칤ticos)
    - component_id: utils
      name: Utilities
      paths:
        - src/utils/**
      rules:
        statuses:
          - type: project
            target: 75%
    
    # Config
    - component_id: config
      name: Configuration
      paths:
        - src/config/**
      rules:
        statuses:
          - type: project
            target: 60%

# Flags (separa tipos de teste)
flags:
  unit:
    paths:
      - src/
    carryforward: true

# 游꿢 COMO USAR:
#
# 1. Criar conta em https://codecov.io
# 2. Adicionar reposit칩rio
# 3. Copiar token e adicionar em GitHub Secrets (CODECOV_TOKEN)
# 4. CI envia coverage automaticamente
# 5. Codecov comenta em PRs com relat칩rio
#
# 游늵 M칄TRICAS:
# - Lines: linhas executadas
# - Statements: statements executados
# - Branches: ramifica칞칫es (if/else) testadas
# - Functions: fun칞칫es testadas
